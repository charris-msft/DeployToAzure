{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json",
    "contentVersion": "1.0.0.0",
    "metadata": {
        "_generator": {
            "name": "bicep",
            "version": "0.5.6.12127",
            "templateHash": "4675416450603964424"
        }
    },
    "parameters": {
        "siteName": {
            "type": "string",
            "defaultValue": "myLightdash",
            "metadata": {
                "description": "Name of Application"
            }
        },
        "containerAppName": {
            "type": "string",
            "defaultValue": "[format('containerapp-{0}', uniqueString(resourceGroup().id))]",
            "metadata": {
                "description": "Specifies the name of the container app."
            }
        },
        "databaseName": {
            "type": "string",
            "defaultValue": "[format('postgres-{0}', uniqueString(resourceGroup().id))]",
            "metadata": {
                "description": "Specifies the name of the container app."
            }
        },
        "containerAppEnvName": {
            "type": "string",
            "defaultValue": "[format('containerapp-env-{0}', uniqueString(resourceGroup().id))]",
            "metadata": {
                "description": "Specifies the name of the container app environment."
            }
        },
        "containerAppLogAnalyticsName": {
            "type": "string",
            "defaultValue": "[format('containerapp-log-{0}', uniqueString(resourceGroup().id))]",
            "metadata": {
                "description": "Specifies the name of the log analytics workspace."
            }
        },
        // TODO - look at Nightscout example to limit to locations where ContainerApps is available
        // "location": {
        //     "type": "string",
        //     "allowedValues": [
        //         "northcentralusstage",
        //         "eastus",
        //         "northeurope",
        //         "canadacentral"
        //     ],
        //     "metadata": {
        //         "description": "Specifies the location for all resources."
        //     }
        // },
        "location": {
            "type": "string",
            "defaultValue": "[resourceGroup().location]",
            "metadata": {
                "description": "Specifies the location for all resources."
            }
        },
        "containerImage": {
            "type": "string",
            "defaultValue": "registry.hub.docker.com/lightdash/lightdash:latest",
            "metadata": {
                "description": "Specifies the docker container image to deploy."
            }
        },
        "targetPort": {
            "type": "int",
            "defaultValue": 8080,
            "metadata": {
                "description": "Specifies the container port."
            }
        },
        "cpuCore": {
            "type": "string",
            "defaultValue": "2",
            "allowedValues": [
                "0.25",
                "0.5",
                "0.75",
                "1",
                "1.25",
                "1.5",
                "1.75",
                "2"
            ],
            "metadata": {
                "description": "Number of CPU cores the container can use. Can have a maximum of two decimals."
            }
        },
        "memorySize": {
            "type": "string",
            "defaultValue": "4",
            "allowedValues": [
                "0.5",
                "1",
                "1.5",
                "2",
                "3",
                "3.5",
                "4"
            ],
            "metadata": {
                "description": "Amount of memory (in gibibytes, GiB) allocated to the container up to 4GiB. Can have a maximum of two decimals. Ratio with CPU cores must be equal to 2."
            }
        },
        "minReplicas": {
            "type": "int",
            "defaultValue": 1,
            "maxValue": 25,
            "minValue": 0,
            "metadata": {
                "description": "Minimum number of replicas that will be deployed"
            }
        },
        "maxReplicas": {
            "type": "int",
            "defaultValue": 1,
            "maxValue": 25,
            "minValue": 0,
            "metadata": {
                "description": "Maximum number of replicas that will be deployed"
            }
        },
        "administratorLogin": {
            "type": "secureString",
            "defaultValue": "TODOReplace",
            "minLength": 1,
            "metadata": {
                "description": "Database administrator login name"
            }
        },
        "administratorLoginPassword": {
            "type": "secureString",
            "defaultValue": "TODOReplaceWithSecureString",
            "maxLength": 128,
            "minLength": 8,
            "metadata": {
                "description": "Database administrator password"
            }
        },
        "postgresFlexibleServersSkuTier": {
            "type": "string",
            "defaultValue": "Burstable",
            "allowedValues": [
                "Burstable",
                "GeneralPurpose",
                "MemoryOptimized"
            ],
            "metadata": {
                "description": "The tier of the particular SKU, e.g. Burstable"
            }
        },
        "postgresFlexibleServersSkuName": {
            "type": "string",
            "defaultValue": "Standard_B1ms",
            "metadata": {
                "description": "The name of the sku, typically, tier + family + cores, e.g. Standard_D4s_v3"
            }
        },
        "postgresFlexibleServersversion": {
            "type": "string",
            "defaultValue": "13",
            "allowedValues": [
                "11",
                "12",
                "13"
            ],
            "metadata": {
                "description": "The version of a PostgreSQL server"
            }
        },
        "createMode": {
            "type": "string",
            "defaultValue": "Default",
            "allowedValues": [
                "Create",
                "Default",
                "PointInTimeRestore",
                "Update"
            ],
            "metadata": {
                "description": "The mode to create a new PostgreSQL server"
            }
        },
        "postgresExtensions": {
            "defaultValue": "citext,uuid-ossp",
            "type": "String"
        },
        "postgresRequireSSL": {
            "defaultValue": "OFF",
            "type": "String"
        }
    },

    "variables": {
        "databaseUrl": "[format('{0}.postgres.database.azure.com', parameters('databaseName'))]"
    },
    "resources": [
        {
            "type": "Microsoft.DBforPostgreSQL/flexibleServers",
            "apiVersion": "2021-06-01",
            "name": "[parameters('databaseName')]",
            "location": "[parameters('location')]",
            "sku": {
                "name": "[parameters('postgresFlexibleServersSkuName')]",
                "tier": "[parameters('postgresFlexibleServersSkuTier')]"
            },
            "properties": {
                "administratorLogin": "[parameters('administratorLogin')]",
                "administratorLoginPassword": "[parameters('administratorLoginPassword')]",
                "createMode": "[parameters('createMode')]",
                "network": {
                    "publicNetworkAccess": "Enabled"
                },

                "storage": {
                    "storageSizeGB": 32
                },
                "backup": {
                    "backupRetentionDays": 7,
                    "geoRedundantBackup": "Disabled"
                },
                "highAvailability": {
                    "mode": "Disabled"
                },
                "maintenanceWindow": {
                    "customWindow": "Disabled",
                    "dayOfWeek": 0,
                    "startHour": 0,
                    "startMinute": 0
                },
                "version": "[parameters('postgresFlexibleServersversion')]"
            }
        },
        {
            "type": "Microsoft.DBforPostgreSQL/flexibleServers/configurations",
            "apiVersion": "2021-06-01",
            "name": "[concat(parameters('databaseName'), '/azure.extensions')]",
            "properties": {
                "value": "[parameters('postgresExtensions')]",
                "source": "user-override"
            },
            "dependsOn": [
                "[resourceId('Microsoft.DBforPostgreSQL/flexibleServers', parameters('databaseName'))]"
            ]
        },
        {
            "type": "Microsoft.DBforPostgreSQL/flexibleServers/configurations",
            "apiVersion": "2021-06-01",
            "name": "[concat(parameters('databaseName'), '/require_secure_transport')]",
            "properties": {
                "value": "[parameters('postgresRequireSSL')]",
                "source": "user-override"
            },
            "dependsOn": [
                "[resourceId('Microsoft.DBforPostgreSQL/flexibleServers', parameters('databaseName'))]"
            ]
        },
        {
            "type": "Microsoft.OperationalInsights/workspaces",
            "apiVersion": "2020-10-01",
            "name": "[parameters('containerAppLogAnalyticsName')]",
            "location": "[parameters('location')]",
            "properties": {
                "sku": {
                    "name": "PerGB2018"
                }
            }
        },
        {
            "type": "Microsoft.App/managedEnvironments",
            "apiVersion": "2022-01-01-preview",
            "name": "[parameters('containerAppEnvName')]",
            "location": "[parameters('location')]",
            "sku": {
                "name": "Consumption"
            },
            "properties": {
                "appLogsConfiguration": {
                    "destination": "log-analytics",
                    "logAnalyticsConfiguration": {
                        "customerId": "[reference(resourceId('Microsoft.OperationalInsights/workspaces', parameters('containerAppLogAnalyticsName'))).customerId]",
                        "sharedKey": "[listKeys(resourceId('Microsoft.OperationalInsights/workspaces', parameters('containerAppLogAnalyticsName')), '2020-10-01').primarySharedKey]"
                    }
                }
            },
            "dependsOn": [
                "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('containerAppLogAnalyticsName'))]"
            ]
        },
        {
            "type": "Microsoft.App/containerApps",
            "apiVersion": "2022-03-01",
            "name": "[parameters('containerAppName')]",
            "location": "[parameters('location')]",
            "properties": {
                "managedEnvironmentId": "[resourceId('Microsoft.App/managedEnvironments', parameters('containerAppEnvName'))]",
                "configuration": {
                    "ingress": {
                        "external": true,
                        "targetPort": "[parameters('targetPort')]",
                        "allowInsecure": false,
                        "traffic": [
                            {
                                "latestRevision": true,
                                "weight": 100
                            }
                        ]
                    }
                },
                "template": {
                    "revisionSuffix": "firstrevision",
                    "containers": [
                        {
                            "name": "[parameters('containerAppName')]",
                            "image": "[parameters('containerImage')]",
                            "resources": {
                                "cpu": "[json(parameters('cpuCore'))]",
                                "memory": "[format('{0}Gi', parameters('memorySize'))]"
                            },
                            "env": [
                                // TODO - convert all of the env vars here: https://github.com/lightdash/lightdash/blob/main/docker-compose.yml
                                //        to env variables and use them below
                                {
                                    "name": "PGHOST",
                                    "value": "[variables('databaseUrl')]"
                                },
                                {
                                    "name": "PGPORT",
                                    "value": "5432"
                                },
                                {
                                    "name": "PGUSER",
                                    "value": "[parameters('administratorLogin')]"
                                },
                                {
                                    "name": "PGPASSWORD",
                                    "value": "[parameters('administratorLoginPassword')]"
                                },
                                {
                                    "name": "PGDATABASE",
                                    "value": "postgres"
                                },
                                {
                                    "name": "SECURE_COOKIES",
                                    "value": "false"
                                },
                                {
                                    "name": "TRUST_PROXY",
                                    "value": "false"
                                },
                                {
                                    "name": "LIGHTDASH_SECRET",
                                    "value": "TODO/CreateSecret"
                                },
                                {
                                    "name": "PORT",
                                    "value": "8080"
                                },
                                {
                                    "name": "LIGHTDASH_LOG_LEVEL",
                                    "value": "debug"
                                },
                                {
                                    "name": "LIGHTDASH_INSTALL_ID",
                                    "value": "TODO/CreateDynamicInstallID"
                                },
                                {
                                    "name": "LIGHTDASH_INSTALL_TYPE",
                                    "value": "docker_image"
                                },
                                {
                                    "name": "AUTH_DISABLE_PASSWORD_AUTHENTICATION",
                                    "value": "false"
                                },
                                {
                                    "name": "AUTH_GOOGLE_OAUTH2_CLIENT_ID",
                                    "value": ""
                                },
                                {
                                    "name": "AUTH_GOOGLE_OAUTH2_CLIENT_SECRET",
                                    "value": ""
                                },
                                {
                                    "name": "SITE_URL",
                                    "value": "http://TODO.update.me"
                                },
                                {
                                    "name": "EMAIL_SMTP_HOST",
                                    "value": ""
                                },
                                {
                                    "name": "EMAIL_SMTP_PORT",
                                    "value": ""
                                },
                                {
                                    "name": "EMAIL_SMTP_SECURE",
                                    "value": ""
                                },
                                {
                                    "name": "EMAIL_SMTP_USER",
                                    "value": ""
                                },
                                {
                                    "name": "EMAIL_SMTP_PASSWORD",
                                    "value": ""
                                },
                                {
                                    "name": "EMAIL_SMTP_ALLOW_INVALID_CERT",
                                    "value": ""
                                },
                                {
                                    "name": "EMAIL_SMTP_SENDER_NAME",
                                    "value": ""
                                },
                                {
                                    "name": "EMAIL_SMTP_SENDER_EMAIL",
                                    "value": ""
                                },
                                {
                                    "name": "ALLOW_MULTIPLE_ORGS",
                                    "value": "false"
                                },
                                {
                                    "name": "LIGHTDASH_QUERY_MAX_LIMIT",
                                    "value": "5000"
                                },
                                {
                                    "name": "LIGHTDASH_MAX_PAYLOAD",
                                    "value": "5mb"
                                },
                                {
                                    "name": "HEADLESS_BROWSER_HOST",
                                    "value": "headless-browser"
                                },
                                {
                                    "name": "HEADLESS_BROWSER_PORT",
                                    "value": "3000"
                                }
                            ]
                        }
                    ],
                    "scale": {
                        "minReplicas": "[parameters('minReplicas')]",
                        "maxReplicas": "[parameters('maxReplicas')]"
                    }
                }
            },
            "dependsOn": [
                "[resourceId('Microsoft.App/managedEnvironments', parameters('containerAppEnvName'))]",
                "[resourceId('Microsoft.DBforPostgreSQL/flexibleServers', parameters('databaseName'))]",
                "[resourceId('Microsoft.DBforPostgreSQL/flexibleServers/configurations', parameters('databaseName'), 'require_secure_transport')]",
                "[resourceId('Microsoft.DBforPostgreSQL/flexibleServers/configurations', parameters('databaseName'), 'azure.extensions')]"
            ]
        }
    ],
    "outputs": {
        "containerAppFQDN": {
            "type": "string",
            "value": "[reference(resourceId('Microsoft.App/containerApps', parameters('containerAppName'))).configuration.ingress.fqdn]"
        }
    }
}